----------------------------------------------------------------------------------------------------

sockaddr 是一个通用的套接字地址结构体，用于存储不同协议族中的地址信息。

由于不同的协议族(如IPv4、IPv6)有不同的地址格式，因此 sockaddr 结构体被设计得足够通用，以适应多种地址类型。

在实际使用时，通常会使用特定于某个协议族的结构体，比如 sockaddr_in(用于IPv4)或 sockaddr_in6(用于IPv6)
并通过强制类型转换将其转换为 sockaddr 类型来传递给套接字函数。



struct sockaddr 
{
    sa_family_t sa_family;  // 地址族(Address Family)，例如 AF_INET 或 AF_INET6
    char        sa_data[];  // 协议地址
};

sa_family: 指定使用的地址族，如 AF_INET(IPv4)、AF_INET6(IPv6)等。
sa_data: 存储具体的地址数据，但这个数组的设计并不方便直接使用，因为它没有明确区分不同类型地址的具体字段。



IPv4 地址结构体：sockaddr_in

	struct sockaddr_in 
	{
		sa_family_t    sin_family; /* 地址族: AF_INET */
		in_port_t      sin_port;   /* 端口号 (使用 htons() 转换) */
		struct in_addr sin_addr;   /* IP 地址 */
	};

	struct in_addr 
	{
		uint32_t s_addr;           /* IPv4 地址 (使用 inet_pton() 或 inet_aton() 转换) */
	};



IPv6 地址结构体：sockaddr_in6

	struct sockaddr_in6 
	{
		sa_family_t     sin6_family;   /* 地址族: AF_INET6 */
		in_port_t       sin6_port;     /* 端口号 (使用 htons() 转换) */
		uint32_t        sin6_flowinfo; /* 流量控制信息 */
		struct in6_addr sin6_addr;     /* IPv6 地址 */
		uint32_t        sin6_scope_id; /* 作用域ID */
	};

	struct in6_addr 
	{
		uint8_t   s6_addr[16];   /* IPv6 地址 */
	};

----------------------------------------------------------------------------------------------------

创建套接字 - socket()

	int socket(int domain, int type, int protocol);
	
	参数：
		domain：指定协议族，如AF_INET(IPv4)、AF_INET6(IPv6)。
		type：指定套接字类型，如SOCK_STREAM(TCP流式套接字)、SOCK_DGRAM(UDP数据报套接字)。
		protocol：通常设置为0，表示使用默认协议。
		
	返回值：
		成功时返回一个非负整数作为套接字描述符；失败时返回 -1 并设置 errno。



绑定IP和端口 - bind()

	int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	
	参数：
		sockfd：由socket()函数创建的套接字描述符。
		addr：指向包含地址信息的结构体(如sockaddr_in或sockaddr_in6)。
		addrlen：地址结构体的大小。
		
	返回值：
		成功时返回 0；失败时返回 -1 并设置 errno。



设置最大连接数 - listen()

	int listen(int sockfd, int backlog);
	
	参数：
		sockfd：监听套接字描述符。
		backlog：等待接受的最大连接数。
		
	返回值：
		成功时返回 0；失败时返回 -1 并设置 errno。



接受连接(服务端) - accept()

	int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
	
	参数：
		sockfd：监听套接字描述符。
		addr：用于存储客户端地址信息的结构体。
		addrlen：地址结构体的大小。
		
	返回值：
		成功时返回新的套接字描述符；失败时返回 -1 并设置 errno。



发起连接(客户端) - connect()

	int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	
	参数：
		sockfd：套接字描述符。
		addr：指向服务器地址信息的结构体。
		addrlen：地址结构体的大小。
		
	返回值：
		成功时返回 0；失败时返回 -1 并设置 errno。



发送数据 - send() 和 sendto()

	ssize_t send(int sockfd, const void *buf, size_t len, int flags);
	ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
				   const struct sockaddr *dest_addr, socklen_t addrlen);
				   
	参数：
		sockfd：套接字描述符。
		buf：要发送的数据缓冲区。
		len：要发送的数据长度。
		flags：发送标志，一般设为0。
		dest_addr：对于sendto()，目标地址信息。
		addrlen：地址结构体的大小。
		
	返回值：
		成功时返回实际发送的字节数；失败时返回 -1 并设置 errno。



接收数据 - recv() 和 recvfrom()

	ssize_t recv(int sockfd, void *buf, size_t len, int flags);
	ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
					 struct sockaddr *src_addr, socklen_t *addrlen);
					 
	参数：
		sockfd：套接字描述符。
		buf：接收数据的缓冲区。
		len：缓冲区的大小。
		flags：接收标志，一般设为0。
		src_addr：对于recvfrom()，源地址信息。
		addrlen：地址结构体的大小。
		
	返回值：
		成功时返回实际接收的字节数；失败时返回 -1 并设置 errno。如果对端关闭了连接，则返回 0。



关闭套接字 - close()

	int close(int fd);
	
	参数：
		fd：要关闭的文件描述符(包括套接字描述符)。
		
	返回值：
		成功时返回 0；失败时返回 -1 并设置 errno。

----------------------------------------------------------------------------------------------------

TCP通信流程：

	服务端：
		socket()	创建套接字
		bind()		绑定服务端主机IP和端口
		listen()	设置最大连接数
		accept()	阻塞服务端进程，直到有请求到达再处理请求。所有请求处理完成后继续阻塞
		recv()		接收数据
		send()		发送数据
		close()		关闭套接字
		
	客户端：
		socket()	创建套接字
		connect()	主动与服务端发起连接
		recv()		发送数据
		send()		接收数据
		close()		关闭套接字
		
----------------------------------------------------------------------------------------------------

端口复用

在socket()和bind()之间加入以下代码：

int opt=1;
setsockopt(lfd,SOL_SOCKET,SO_REUSEADDR,(void*)&opt,sizeof(opt));
			^
lfd是服务端套接字描述符

----------------------------------------------------------------------------------------------------