----------------------------------------------------------------------------------------------------

总过程：
	预处理，编译，汇编，链接
	
----------------------------------------------------------------------------------------------------

1. 预处理（Preprocessing）

对预处理指令（以 # 开头的指令）进行处理。这些指令包括但不限于：
	#include
	#define, #undef
	#if, #ifdef, #ifndef, #else, #elif, #endif
	注释


头文件在该阶段被处理，之后不再参与过程
头文件不需要被被明显指定，只有当头文件不在默认搜索路径内时，才需要使用 -I 选项来添加包含路径，例如：
gcc -c add.c -o add.o -I /path/to/include

----------------------------------------------------------------------------------------------------

2. 编译（Compilation）

编译器将预处理后的源代码转换为目标代码或汇编代码，是最耗时的一个阶段。

这个阶段输出的是汇编代码或目标文件（取决于编译器的具体实现）。

----------------------------------------------------------------------------------------------------

3. 汇编（Assembly）

汇编器将编译器生成的汇编代码翻译成机器码，并打包成目标文件（.o 或 .obj）。
目标文件包含实际的机器指令以及一些额外的信息，如符号表（用于链接阶段解析外部引用）、重定位信息等。

----------------------------------------------------------------------------------------------------

4. 链接（Linking）

链接器负责将一个或多个目标文件与所需的所有库文件组合在一起，形成最终的可执行文件。

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

静态库的创建与链接


1.生成目标文件：
	gcc -c add.c -o add.o
	gcc -c sub.c -o sub.o

2.打包为静态库：
	ar rcs libmy_math.a add.o sub.o
注：打包静态库时命名为libmy_math.a
	
3.链接静态库
	gcc main.c -L. -lmy_math -o my_program.out
		-L. 告诉 GCC 在当前目录查找库
		-lmy_math 指定要链接的库的名字为 libmy_math.a
注；链接静态库时命名为my_math(省略前缀lib和后缀.a)



Linux/Unix 中的静态库通常遵循如下命名格式：
	lib<name>.a
	
lib：表示这是一个库（library）
<name>：是库的名字（比如 my_math）
.a：表示这是一个归档文件（archive），即静态库

当使用 -l 参数进行链接时，GCC 会自动查找符合 lib<name>.a 或者 lib<name>.so 格式的文件
例如使用 gcc main.c -lmy_math 命令时，GCC 会搜索指定路径中 libmy_math.a 或者 libmy_math.so 文件
----------------------------------------------------------------------------------------------------

动态库的创建与链接



注：动态库需要设置全局路径

1.生成目标文件
	gcc -fPIC -c add.c -o add.o
	gcc -fPIC -c sub.c -o sub.o
	
2.将目标文件链接为动态库(动态库后缀为.so)
	gcc -shared -o lib_my_math.so add.o sub.o
	
步骤1和步骤2可以合并为：
	gcc -fPIC -shared add.c sub.c -o lib_my_math.so

3.链接动态库
	gcc main.c -L. -lmy_math -o my_program.out



全局路径设置

1.在/etc/ld.so.conf.d/下创建一个新的配置文件my_library.conf
2.编辑文件，添加动态库的路径：
	/home/lelqwq/
3.保存退出后执行ldconfig更新动态链接器缓存。执行ldconfig -p | grep my_library.conf验证动态库是否被正确加载



为什么动态库需要设置全局路径？

静态库不用设置全局路径是因为：
	在编译阶段，静态库中的代码会被直接复制到可执行文件中，
	这意味着每个使用该静态库的程序都包含一份完整的库代码副本。

而动态库需要设置全局路径是因为：
	动态库中的代码不会在编译阶段被复制到可执行文件中，而是在程序启动时由操作系统加载到内存中，
	因此需要设置路径来找到代码

----------------------------------------------------------------------------------------------------